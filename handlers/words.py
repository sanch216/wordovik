from aiogram import Router, types
from aiogram.filters import Command
from datetime import datetime, timedelta

from config import INTERVALS
from db.database import Session, User, Word
import logging

router = Router()

from datetime import datetime, timedelta
from aiogram import Router, types
from aiogram.filters import Command
from db.database import Session, User, Word
from config import INTERVALS  # <-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã

router = Router()

@router.message(Command("add"))
async def add_word(message: types.Message):
    try:
        args = message.text.split(" ", 1)
        if len(args) < 2:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã")

        word_part = args[1].split(";", 1)
        word = word_part[0].strip()
        translation = word_part[1].strip() if len(word_part) > 1 else ""

        if not translation:
            raise ValueError("–ù–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞")

        with Session() as session:
            user = session.query(User).filter_by(chat_id=message.chat.id).first()
            if not user:
                await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ (/english –∏–ª–∏ /german)")
                return

            new_word = Word(
                user_id=user.id,
                word=word,
                translation=translation,
                next_review=datetime.now() + timedelta(days=INTERVALS[0])  # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º INTERVALS
            )
            session.add(new_word)
            session.commit()

        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {word} - {translation}")

    except ValueError as ve:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {ve}\n–§–æ—Ä–º–∞—Ç: /add —Å–ª–æ–≤–æ;–ø–µ—Ä–µ–≤–æ–¥")
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")

@router.message()
async def check_translation(message: types.Message):
    with Session() as session:
        user = session.query(User).filter_by(chat_id=message.chat.id).first()
        word = session.query(Word).filter(
            Word.user_id == user.id,
            Word.next_review <= datetime.now()
        ).first()

        if not word:
            return

        if message.text.lower() == word.translation.lower():
            word.level = min(word.level + 1, 4)
            await message.answer(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {INTERVALS[word.level]} –¥–Ω–µ–π.")
        else:
            word.level = max(word.level - 1, 0)
            await message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {word.translation}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        word.next_review = datetime.now() + timedelta(days=INTERVALS[word.level])  # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º INTERVALS
        session.commit()


@router.message(Command("mywords"))
async def show_words(message: types.Message):
    with Session() as session:
        user = session.query(User).filter_by(chat_id=message.chat.id).first()
        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫.")
            return

        words = session.query(Word).filter_by(user_id=user.id).all()
        if not words:
            await message.answer("üìù –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –ø—É—Å—Ç.")
            return

        response = "üìö –í–∞—à–∏ —Å–ª–æ–≤–∞:\n\n"
        for word in words:
            response += f"‚Ä¢ {word.word} ‚Äî {word.translation}\n"
            if word.definition:
                response += f"  üìñ {word.definition}\n"
            if word.example:
                response += f"  ‚úçÔ∏è –ü—Ä–∏–º–µ—Ä: {word.example}\n"
            response += "\n"

        await message.answer(response)